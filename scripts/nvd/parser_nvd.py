import json
import sys
import requests

api_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/"
in_file_path = '../../data/nvd/nvd_raw.json'
out_file_path = "../../data/nvd/cves_nvd_api.json"
cve_list = []
data = []

with open(in_file_path, "r") as in_file:
    data = json.load(in_file)

cves = data["cves"]

current_cve = 0
total_cves = len(cves)

for cve, val in cves.items():
    current_cve += 1
    print(f"Currently analyzing CVE {current_cve} of {total_cves}")

    exploitable = False
    if "refmap" in val:
        refmap = val["refmap"]
        confirm = []
        if "confirm" in refmap:
            confirm = refmap["confirm"]
            for c in confirm:
                if "exploit" in c.lower():
                    exploitable = True
        misc = []
        if "misc" in refmap:
            misc = refmap["misc"]
            for m in misc:
                if "exploit" in m.lower():
                    exploitable = True
        if "exploit-db" in refmap:
            exploitable = True

    try:
        print(f'{api_url}{cve}')
        response = requests.get(f'{api_url}{cve}').json()
        cve_data = response["result"]["CVE_Items"][0]
        sw_and_author =  cve_data["configurations"]["nodes"][0]["cpe_match"][0]["cpe23Uri"].split(":")
        cve_list.append({
            "CVE": cve,
            "CWE": cve_data["cve"]["problemtype"]["problemtype_data"][0]["description"][0]["value"] or "N.D.",
            "Software author": sw_and_author[3],
            "Software": sw_and_author[4],
            "Software version":sw_and_author[5],
            "impact": cve_data["impact"] or "N.D.",
            "exploitable": exploitable
        })
    except:
        print(f"Error trying to get {api_url + cve}")

with open(out_file_path, "w") as out_file:
    json.dump(cve_list, out_file, indent=2)



